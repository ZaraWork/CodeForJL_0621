<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        j//wfw//+H4P//gID//8AB///AA///4Af/8=
</value>
  </data>
</root>