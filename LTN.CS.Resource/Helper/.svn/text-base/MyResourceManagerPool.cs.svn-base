using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using IBatisNet.Common.Logging;

namespace LTN.CS.Core.Helper
{
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public static class MyResourceManagerPool
    {
        /// <summary>
        /// 日志
        /// </summary>
        private static readonly ILog log = LogManager.GetLogger("infoAppender");
        private static readonly object objForLock = new object();
        private static Dictionary<string, Dictionary<string, global::System.Resources.ResourceManager>> resourceMans = new Dictionary<string, Dictionary<string, global::System.Resources.ResourceManager>>();
        public static Dictionary<string, Assembly> assemblies = new Dictionary<string, Assembly>();
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager getManager(string assemblyName,string baseName)
        {
            try
            {
            	Assembly assembly = getAssembly(assemblyName);
                Dictionary<string, global::System.Resources.ResourceManager> dic = resourceMans[assemblyName];
                if (dic.ContainsKey(baseName))
                {
                    return dic[baseName];
                }
                else
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(baseName, assembly);
                    dic[baseName] = temp;
                    return temp;
                }
            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
            	return null;
            }
        }
        public static Assembly getAssembly(string assemblyName)
        {
            lock (objForLock)
            {
                Assembly assembly = null;
                if (assemblies.ContainsKey(assemblyName))
                {
                    assembly = assemblies[assemblyName];
                }
                else
                { 
                    Assembly ass = Assembly.ReflectionOnlyLoad(assemblyName);
                    byte[] buffer = System.IO.File.ReadAllBytes(ass.Location);
                    assembly = Assembly.Load(buffer);
                    assemblies.Add(assemblyName, assembly);
                    resourceMans[assemblyName] = new Dictionary<string, System.Resources.ResourceManager>(); 
                }
                return assembly;
            }
        }
    }
}
